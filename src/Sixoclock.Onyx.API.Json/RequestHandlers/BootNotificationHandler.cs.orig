using Abp.Domain.Repositories;
using Castle.Core.Logging;
using Newtonsoft.Json;
//using Sixoclock.Onyx.Chargepoints;
using Sixoclock.Onyx.Web.Schema;
using Sixoclock.Onyx.Web.Schema.Models;
using Sixoclock.Onyx.Web.Utility;
using Sixoclock.Onyx.Web.WebSockets;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.WebSockets;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Abp.Domain.Uow;

namespace Sixoclock.Onyx.Web.RequestHandlers
{
    [OCPPAction(Name = "BootNotification")]
    public class BootNotificationHandler : IRequestHandler
    {
        private readonly OnyxWebSocketManager _webSocketManager;
        private readonly ILogger _logger;
        private readonly IRepository<Chargepoint> _chargepointRepository;
        private IRepository<OCPPMessageEvent> _messageEventRepository;
        private readonly IRepository<ChargepointKeyValue> _connectorKeyValueRepository;
        private readonly IRepository<OCPPStatus> _ocppStatusRepository;
        private readonly IRepository<OCPPMessageEvent> _ocppMessageEventRepository;
        private readonly IRepository<ChargepointModel> _cPModelRepository;
        private readonly IRepository<Vendor> _cPVendorRepository;
        private readonly IUnitOfWorkManager _unitOfWorkManager;
        public BootNotificationHandler(OnyxWebSocketManager webSocketManager,
            IRepository<Chargepoint> chargepointRepository,
            ILogger logger, IRepository<OCPPMessageEvent> messageEventRepository,
            IRepository<ChargepointKeyValue> connectorKeyValueRepository,
            IRepository<OCPPStatus> ocppStatusRepository,
            IRepository<OCPPMessageEvent> ocppMessageEventRepository, IRepository<OCPPMessageEvent> cPVendorRepository, IRepository<OCPPMessageEvent> cPModelRepository, IRepository<ChargepointModel> cPModelRepository1, IRepository<Vendor> cPVendorRepository1, IUnitOfWorkManager unitOfWorkManager)
        {
            this._webSocketManager = webSocketManager;
            this._chargepointRepository = chargepointRepository;
            this._logger = logger;
            _messageEventRepository = messageEventRepository;
            _connectorKeyValueRepository = connectorKeyValueRepository;
            this._ocppStatusRepository = ocppStatusRepository;
            this._ocppMessageEventRepository = ocppMessageEventRepository;
            _cPModelRepository = cPModelRepository1;
            _cPVendorRepository = cPVendorRepository1;
            _unitOfWorkManager = unitOfWorkManager;
        }
        [UnitOfWork]
        public async Task HandleRequestAsync(RPCMessage message)
        {
            using (var unitofWork = _unitOfWorkManager.Begin())
            {
                var socket = _webSocketManager.GetSocketById(message.ConnectionId);

                var response = new List<object>();
                Chargepoint cp = null;
                try
                {

                    _unitOfWorkManager.Current.SetTenantId(socket.TenantId);
                    var messageOb = JsonConvert.DeserializeObject<BootNotificationRequest>(message.PayLoad);

<<<<<<< HEAD
                    cp = _chargepointRepository.FirstOrDefault(x => x.Identity == socket.Identity);



                    var ocppStatus =
                        await _ocppStatusRepository.FirstOrDefaultAsync(x => x.Status == OCPPStatusConstants.Success);
                    if (cp != null)
=======
                var ocppStatus =
                    await _ocppStatusRepository.FirstOrDefaultAsync(x => x.Status == OCPPStatusConstants.Success);
                if (cp != null)
                {
                    var cpModel = _cPModelRepository.FirstOrDefault(x => x.Id == cp.ChargepointModelId);
                    var cpVendor= _cPVendorRepository.FirstOrDefault(x => x.Id == cpModel.VendorId);
                    var keyvalue = await _connectorKeyValueRepository.FirstOrDefaultAsync(x =>
                        x.Chargepoint.Id == cp.Id && x.Key ==KeyValueConstants.HeartbeatInterval);
                    int heartbeatInterval = keyvalue != null ? Int32.Parse(keyvalue.ChargepointValue) : 0;
                    if (cpVendor.Name == messageOb.ChargePointVendor &&
                        cpModel.ModelName == messageOb.ChargePointModel)
>>>>>>> 49f0ed63f68a8c294e1eac30484b8a2f94875e25
                    {
                        var cpModel = _cPModelRepository.FirstOrDefault(x => x.Id == cp.ChargepointModelId);
                        var cpVendor = _cPVendorRepository.FirstOrDefault(x => x.Id == cpModel.VendorId);
                        var keyvalue = await _connectorKeyValueRepository.FirstOrDefaultAsync(x =>
                            x.Connector.Id == cp.Id && x.Key == KeyValueConstants.HeartbeatInterval);
                        int heartbeatInterval = keyvalue != null ? Int32.Parse(keyvalue.ChargepointValue) : 0;
                        if (cpVendor.Name == messageOb.ChargePointVendor &&
                            cpModel.ModelName == messageOb.ChargePointModel)
                        {
                            var bootNotificationREsponse = new BootNotificationResponse()
                            {
                                Status = BootNotificationResponseStatus.Accepted,
                                CurrentTime = "2017-09-13T12:53:32.486Z",
                                Interval = heartbeatInterval
                            };
                            response.Add(3);
                            response.Add(message.UniqueId);
                            response.Add(bootNotificationREsponse);

                            await this._ocppMessageEventRepository.InsertAsync(new OCPPMessageEvent()
                            {
                                TenantId = socket.TenantId,
                                OCPPStatusId = ocppStatus.Id,
                                ChargepointId = cp.Id,
                                MessageData = JsonConvert.SerializeObject(bootNotificationREsponse)
                            });
                        }
                        else
                        {
                            var bootnotificationResponse = new BootNotificationResponse()
                            {
                                Status = BootNotificationResponseStatus.Pending,
                                CurrentTime = "2017-09-13T12:53:32.486Z",
                                Interval = heartbeatInterval
                            };
                            response.Add(3);
                            response.Add(message.UniqueId);
                            response.Add(bootnotificationResponse);
                            await this._ocppMessageEventRepository.InsertAsync(new OCPPMessageEvent()
                            {
                                TenantId = socket.TenantId,
                                OCPPStatusId = ocppStatus.Id,
                                ChargepointId = cp.Id,
                                MessageData = JsonConvert.SerializeObject(bootnotificationResponse)
                            });
                        }

                    }
                    else
                    {
                        var bootNotificationResponse = new BootNotificationResponse()
                        {
                            Status = BootNotificationResponseStatus.Rejected,
                            CurrentTime = "2017-09-13T12:53:32.486Z"
                        };
                        response.Add(3);
                        response.Add(message.UniqueId);
                        response.Add(bootNotificationResponse);
                        await this._ocppMessageEventRepository.InsertAsync(new OCPPMessageEvent()
                        {
                            TenantId = socket.TenantId,
                            OCPPStatusId = ocppStatus.Id,
                            ChargepointId = cp.Id,
                            MessageData = JsonConvert.SerializeObject(bootNotificationResponse)
                        });
                    }

                    var responseJson = JsonConvert.SerializeObject(response);
                    _logger.DebugFormat("Response:\n {0}", responseJson);
                    await socket.Connection.SendAsync(new ArraySegment<byte>(Encoding.UTF8.GetBytes(responseJson)),
                        WebSocketMessageType.Binary, true, CancellationToken.None);
                    await unitofWork.CompleteAsync();

                }
                catch (Exception ex)
                {
                    var ocppStatus =
                        await _ocppStatusRepository.FirstOrDefaultAsync(x => x.Status == OCPPStatusConstants.Failed);
                    var errorResponse = new CallErrorResponse()
                    {
                        ErrorCode = OCPPErrorCode.InternalError,
                        ErrorDescription = ex.Message,
                        ErrorDetails = ex.StackTrace
                    };
                    response.Clear();
                    response.Add(3);
                    response.Add(message.UniqueId);
                    response.Add(errorResponse);
                    if (cp != null)
                        await this._ocppMessageEventRepository.InsertAsync(new OCPPMessageEvent()
                        {
                            TenantId = socket.TenantId,
                            OCPPStatus = ocppStatus,
                            ChargepointId = cp.Id,
                            MessageData = JsonConvert.SerializeObject(errorResponse)
                        });
                    var responseJson = JsonConvert.SerializeObject(response);
                    _logger.DebugFormat("Response:\n {0}", responseJson);
                    await socket.Connection.SendAsync(new ArraySegment<byte>(Encoding.UTF8.GetBytes(responseJson)),
                        WebSocketMessageType.Binary, true, CancellationToken.None);
                }
            }
        }
    }
}
